
double fracture_loss_model(double t_y,double K, double A_fra_initial, double w_i, double m, double Q, double pressure_wellbore)

{
	double v_av_frac = Q / A_fra_initial;							// average velocity
	double r_s_fra = ((1 + 2 * m) / 2 / m)*(8 * v_av_frac) / (w);     // shear rate  at fracture 
	double t_w1 = t_y + K * pow(r_s_fra, m);								// initial t_w1
	double e = 1;
	// calculate the wall shear stress
	do
	{
		double x = t_y / t_w1;
		double Ca = (1 - x / (1 + m) - m* pow(x, 2) / (1 + m)) * 2;
		double t_w2 = t_y + K * pow((r_s_fra / Ca), m);
		e = t_w2 - t_w1;
		t_w1 = t_w2;
	} while (e > 0.00000001);
	cout << "wall shear stress is: " << t_w1 << endl;

	// Calculate Generalized flow-behavior index. (Ahmed and Miska 2009)
	double x = t_y / t_w1;
	double Ca = (1 - x / (1 + m) - m* pow(x, 2) / (1 + m)) * 2;
	double N = m * Ca / (1 + 2 * m * (1 - Ca));
	cout << "the generalized fluid flow index(0.15 < N < 0.4): " << N << endl;
	// Geomechanics!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	return N;
}



#include <math.h>
#include <iostream>
#include <stdlib.h>

using namespace std;

//definition------------------------------------------------------------------------------------------------

double dPdLannulus(double theta, double g, double D_po, double stdoff, double m, double D_pi, double D_hl, double H1, double H2, double H3, double MD, double e_den, double t_y, double K, double w, double h, double A_anu, double A_pip, double Q);

double dPdLpipe(double D_po, double m, double D_pi, double H1, double H2, double H3, double MD, double e_den, double t_y, double K, double w, double h, double A_anu, double A_pip, double Q);

double Pb(double n, double dn, double rou, double Q);

//implementation-------------------------------------------------------------------------------------------

double dPdLannulus(double theta, double g, double D_po, double stdoff, double m, double D_pi, double D_hl, double H1, double H2, double H3, double MD, double e_den, double t_y, double K, double w, double h, double A_anu, double A_pip, double Q)
{

    // calculate the wall shear stress
    double v_av = Q / A_anu;                            // average velocity
    double r_s = ((1 + 2 * m) / 3 / m)*(12 * v_av) / (D_hl - D_po);     // shear rate
    double t_w1 = t_y + K * pow(r_s, m);                // initial t_w1
    double e = 1;
    // calculate the wall shear stress
    do
    {
        double x = t_y / t_w1;
        double Ca = 1 - x / (1 + m) - m* pow(x, 2) / (1 + m);
        double t_w2 = t_y + K * pow((r_s / Ca), m);
        e = t_w2 - t_w1;
        t_w1 = t_w2;
    } while (e > 0.00000001);
    cout << "wall shear stress is: " << t_w1 << endl;
    system("pause");

    // Calculate Generalized flow-behavior index. (Ahmed and Miska 2009)

    double x = t_y / t_w1;
    double P = 3 * m / (1 + 2 * m)*(1 - x / (1 + m) - (m / (1 + m))*pow(x, 2));
    double N = m * P / (1 + 2 * m * (1 - P));
    cout << "the generalized fluid flow index(0.15 < N < 0.4): " << N << endl;
    system("pause");

    // Use the correlation to calculate the critical Reynolds number for laminar and turbulent flow

    // Geometry index of the pipe and wellbore
    double k = D_pi / D_po;
    // Critical Reynolds number for laminar flow
    double Re1 = 2100 * (pow(N, 0.331)*(1 + 1.402*k - 0.977*pow(k, 2)) - 0.019*stdoff*pow(N, -0.868)*k);
    // Critical Reynolds number for turbulent flow
    double Re2 = 2900 * (pow(N, (-0.039*pow(Re1, 0.307))));
    // Reynolds number for Yield Power Law flow
    double Re_YPL = 12 * e_den * v_av / t_w1;
    // Laminar flow friction factor
    double f_Lam = 24 / Re_YPL;

    cout << f_Lam << endl;
    cout << Re2 << endl;
    cout << Re_YPL << endl;
    system("pause");
    double f_1 = f_Lam;
    // calculate the  flow friction factor
    if (Re1 > Re_YPL)        // for laminar flow
    {
        if (stdoff != 0)
        {
            double R = (1 - 0.072*stdoff / N*pow(k, 0.8454) - 1.5*pow(stdoff, 2)*sqrt(N)*pow(k, 0.1852) + 0.96*pow(stdoff, 2)*sqrt(N)*pow(k, 0.2527));
            f_1 = f_Lam * R;
        }
    }
    else
    {
        if (Re_YPL > Re2)    // calculate the turbulent flow friction factor
	{
		//Colebrook-White function
		double rough= //roughness
		double Deq= //equavalent diameter
		f1=0.001; //assume initial value
		double abc=100;
		do
		{
			double right=1.14-2*log(e/Deq+9.34/(Re_YPL*pow(f1,0.5)));
			double f2=pow(1/right,2);
			abc=fabs(f2-f1);
			f1=f2;
		}while(abc<1e-6);
		double f_1=f1; //
	}
            if (Re_YPL > Re1 && Re_YPL < Re2)         // calculate the transitional fluid flow friction factor
            {
                double f_tran = f_Lam + (Re_YPL - Re1)*(f_t - f_Lam) / (Re2 - Re1);
                double f_1 = f_tran;
            }
        }
    }

    double dPdLannulus = 4 * f_1 * t_w1 / (D_po - D_pi);
    cout << "dP/dL for annulus: " << dPdLannulus << endl;
    system("pause");
    return dPdLannulus;
}

//---------------------------------------------------------------------------------------------------------

double dPdLpipe(double D_po, double m, double D_pi, double H1, double H2, double H3, double MD, double e_den, double t_y, double K, double w, double h, double A_anu, double A_pip, double Q)
{
    //Step 1: Calculate the wall shear stress
    double v_pipe = Q / A_pip;                                      // average velocity in the pipe
    double r_s_p = ((1 + 3 * m) / 4 / m)*(8 * v_pipe) / (D_pi);     // shear rate for the pipe
    double t_w1_p = t_y + K * pow(r_s_p, m);                          // initial t_w1
    double e_p = 1;
    do
    {
        double x = t_y / t_w1_p;
        double Ca = 1 - x / (2 * m + 1);
        double t_w2 = t_y + K * pow((r_s_p / Ca), m);
        e = (t_w2 - t_w1) / t_w1_p;
        t_w1_p = t_w2;
    } while (e_p < 0.01);
    // Step 2: Calculate the Reynolds number
    double y = (log(m) + 3.93) / 50;
    double z = (1.75 - log(m)) / 7;
    double Cc = 1 - (1 / (2 * m + 1))*(t_y / t_w1);
    // Critical Reynolds Number
    double Re_cr = pow((4 * (3 * m + 1) / m / y), (1 / (1 - z)));
    double Re_eq = ((6 * m + 2) / m)*(e_den*pow(v_pipe, (2 - m))*(D_pi / 2)) / ((t_y*pow((D_pi / 2 / v_pipe), m)) + K*((3 * m + 1) / m / Cc));

    double f = 16 / Re_eq*(3 * m + 1) / 4 / m;

    if (Re_cr > Re_eq)  // Laminar flow
    {
        double f1 = y * pow(Cc*Re_eq, (-z));
        f = f1;
	double dPdLpipe = 2 * f * e_den*pow(v_pipe, 2) / D_pi;
    }
	else //Turbulent flow
	{
		//f=
		dPdLpipe=2*f*e_den*pow(v_pipe,2)/D_pi;
	}

	return dPdLpipe;
}

//---------------------------------------------------------------------------------------------------------

double Pb(double n, double dn, double rou, double Q) //calculate pressure drop at bit
//field unit!!!
//n: number of nozzles, dn: nozzle diameter (in), rou: density (ppg), Q: flow rate (ppg)
{
	double An=n*(M_PI/4)*pow(0.5,2); //nozzle area (in2)
	double Pb=rou*pow(Q,2)/(pow(An,2)*10858); //pressure drop at bit (psi)
	return Pb;
}
